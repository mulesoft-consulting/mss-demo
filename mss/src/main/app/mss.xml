<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
	<sfdc:config name="Salesforce__Basic_authentication"
		username="${sfdc.user}" password="${sfdc.password}" securityToken="${sfdc.token}"
		doc:name="Salesforce">
	</sfdc:config>
	<db:generic-config name="db.connector" url="${jdbc.url}"
		driverClassName="${jdbc.driver}" doc:name="Generic Database Configuration" />
	<ws:consumer-config name="Web_Service_Consumer"
		wsdlLocation="wsdl/order.wsdl" service="OrderResponse" port="OrderPort"
		serviceAddress="http://${ws.host}:${ws.port}/orders" doc:name="Web Service Consumer" />

	<flow name="sfdc2db.opp2order" processingStrategy="synchronous">

		<poll doc:name="poll.sfdc">
			<fixed-frequency-scheduler frequency="10000" />
			<watermark variable="watermark"
				default-expression="#[server.dateTime.plusHours(-1).toString()]"
				selector-expression="#[payload.LastModifiedDate]" selector="MAX" />
			<sfdc:query config-ref="Salesforce__Basic_authentication"
				doc:name="QueryClosedOpps"
				query="dsql:SELECT AccountId,Amount,Id,LastModifiedById,LastModifiedDate,Name FROM Opportunity WHERE ((LastModifiedById &lt;&gt; '${sfdc.system.user}' AND IsClosed = true) AND LastModifiedDate &gt; #[watermark])" />
		</poll>
		<logger message="#[payload]" level="ERROR" doc:name="Logger" />
		<foreach doc:name="For Each">
			<tracking:custom-event event-name="Opportunity Closed"
				doc:name="Opportunity Closed">
				<tracking:meta-data key="OpportunityName" value="#[payload.Name]" />
				<tracking:meta-data key="OpportunityId" value="#[payload.Id]" />
			</tracking:custom-event>
			<logger message="#[payload]" level="INFO" doc:name="Logger" />
			<flow-ref name="process.opp" doc:name="process.opp" />

		</foreach>

	</flow>

	<flow name="process.opp">
		<set-variable variableName="oppId" value="#[payload.Id]"
			doc:name="oppId" />
		<set-variable variableName="oppName" value="#[payload.Name]"
			doc:name="oppName" />
		<enricher source="#[payload]" target="#[flowVars['contact']]"
			doc:name="SaveContact">

			<sfdc:query-single config-ref="Salesforce__Basic_authentication"
				query="dsql:SELECT Email,FirstName,LastName,MailingAddress,MailingCity,MailingCountry FROM Contact WHERE AccountId = '#[payload.AccountId]' "
				doc:name="GetMainContact" />

		</enricher>
		<enricher source="#[payload]" target="#[flowVars.oppItems]"
			doc:name="SaveOppItems">

			<sfdc:query config-ref="Salesforce__Basic_authentication"
				query="dsql:SELECT Name,Quantity FROM OpportunityLineItem WHERE OpportunityId = '#[oppId]'"
				doc:name="GetOppItems" />

		</enricher>

		<scatter-gather doc:name="Scatter-Gather">

			<processor-chain>
				<db:insert config-ref="db.connector" autoGeneratedKeys="true"
					autoGeneratedKeysColumnNames="orderId" doc:name="InsertOrder">
					<db:parameterized-query><![CDATA[insert into orders (customerName, country) values(#[contact.FirstName +' '+contact.LastName], #[contact.MailingAddress.country])]]></db:parameterized-query>
				</db:insert>


				<set-payload value="#[payload[0].get('SCOPE_IDENTITY()')]"
					doc:name="Get DB Key" />

			</processor-chain>

			<processor-chain>
				<dw:transform-message doc:name="Create Soap Request">
					<dw:input-variable doc:sample="Contact.dwl"
						variableName="contact" />
					<dw:input-variable doc:sample="list_OpportunityLineItem_1.dwl"
						variableName="oppItems" />
					<dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://example.mule.mulesoft.com/
---
//Some output fields where skipped as the structure is too deep (more than 2 levels).
//To add missing fields click on the scaffold icon (second on the toolbar).
{
	ns0#Order: {
		FirstName: flowVars.contact.FirstName,
		LastName: flowVars.contact.LastName,
		Email: flowVars.contact.Email,
		Country: flowVars.contact.MailingCountry,
		Products: {
			(flowVars.oppItems map {
				Name: $.Name,
				Quantity: $.Quantity
			})
		}
		
	}
}]]></dw:set-payload>
				</dw:transform-message>


				<ws:consumer config-ref="Web_Service_Consumer"
					operation="Order" doc:name="Create fulfillment order" />

			</processor-chain>
		</scatter-gather>
		<set-variable variableName="orderId" value="#[payload[0].toString()]"
			doc:name="Order Id" />
		<tracking:custom-event event-name="Order Created"
			doc:name="Order Created">
			<tracking:meta-data key="OpportunityName" value="#[oppName]" />
			<tracking:meta-data key="OpportunityId" value="#[oppId]" />
			<tracking:meta-data key="OrderId" value="#[orderId]" />
		</tracking:custom-event>
		<dw:transform-message doc:name="Create SFDC Update">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
	Id: flowVars.oppId,
	Description: (flowVars.orderId as :string)	
}]]]></dw:set-payload>
		</dw:transform-message>
		<sfdc:update config-ref="Salesforce__Basic_authentication"
			type="Opportunity" doc:name="Update Opp">
			<sfdc:objects ref="#[payload]" />
		</sfdc:update>
		<tracking:custom-event event-name="SFDC Order Id Updated"
			doc:name="SFDC Order Id Updated">
			<tracking:meta-data key="OpportunityName" value="#[oppName]" />
			<tracking:meta-data key="OpportunityId" value="#[oppId]" />
			<tracking:meta-data key="OrderId" value="#[orderId]" />
		</tracking:custom-event>
		<choice-exception-strategy doc:name="Choice Exception Strategy">
			<catch-exception-strategy
				when="#[exception.causedBy(com.sforce.soap.partner.fault.UnexpectedErrorFault)]"
				doc:name="Catch SFDC Issue">
				<logger message="Salesforce Issue #[payload]" level="ERROR"
					doc:name="SFDC Data Issue" />
				<tracking:custom-event event-name="Salesforce Data Issue"
					doc:name="Salesforce Data Issue">
					<tracking:meta-data key="OpportunityName" value="#[payload.Name]" />
					<tracking:meta-data key="OpportunityId" value="#[payload.Id]" />
				</tracking:custom-event>

			</catch-exception-strategy>
			<catch-exception-strategy doc:name="Catch All">
				<logger message="******** General Issue ********" level="ERROR"
					doc:name="Logger" />
				<tracking:custom-event event-name="Unidentified Error"
					doc:name="Unidentified Error">
					<tracking:meta-data key="OpportunityName" value="#[payload.Name]" />
					<tracking:meta-data key="OpportunityId" value="#[payload.Id]" />
				</tracking:custom-event>

			</catch-exception-strategy>
		</choice-exception-strategy>
	</flow>

</mule>