<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    <munit:config name="munit" mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:api.xml"/>
    </spring:beans>
   
    <munit:test name="get.orders-happy.path" description="get.orders-happy.path">
        <mock:when messageProcessor=".*:.*" doc:name="mock.db.insert">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Select All']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[['COUNTRY':'US', 'ORDERID':1, 'CUSTOMERNAME':'Solution Architect']]]"/>
        </mock:when>
        
        <munit:set payload="something" doc:name="Set Message"/>
        <flow-ref name="get:/orders:api-config" doc:name="Flow-ref to get:/orders:api-config"/>
        <munit:assert-on-equals expectedValue="US" actualValue="#[payload[0].COUNTRY]" doc:name="Assert Country"/>
        <munit:assert-on-equals expectedValue="#[1]" actualValue="#[payload[0].ORDERID]" doc:name="Assert OrderId"/>
        <munit:assert-on-equals expectedValue="Solution Architect" actualValue="#[payload[0].CUSTOMERNAME]" doc:name="Assert Customer Name"/>
    </munit:test>
     
    <munit:test name="post.orders-happy.path" description="post.orders-happy.path">
        <mock:when messageProcessor=".*:.*" doc:name="mock.db.insert">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['InsertOrder']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[['SCOPE_IDENTITY()':12]]]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="mock.ws.call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create fulfillment order']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:exam=&quot;http://example.mule.mulesoft.com/&quot;&gt;    &lt;soapenv:Body&gt;       &lt;exam:OrderResponse&gt;          &lt;ID&gt;PO-123&lt;/ID&gt;       &lt;/exam:OrderResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;']"/>
        </mock:when>
        <munit:set payload="{&quot;first_name&quot;: &quot;Solution&quot;, &quot;last_name&quot;: &quot;Architect&quot;, &quot;email&quot;: &quot;solution.architect@mule.si.com&quot;,&quot;country&quot;: &quot;US&quot;,&quot;products&quot;: [{&quot;name&quot;: &quot;Squishy Mule&quot;,&quot;quantity&quot;: 10}]}" doc:name="Set Message"/>
        <flow-ref name="post:/orders:application/json:api-config" doc:name="Flow-ref to post:/orders:application/json:api-config"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
        <munit:assert-on-equals message="Status message not correct" expectedValue="Success" actualValue="#[payload.status]" doc:name="Assert status message"/>
        <munit:assert-on-equals message="Id is missing or incorrect" expectedValue="12" actualValue="#[payload.id]" doc:name="Assert Id"/>
    </munit:test>
    
    <munit:test name="post.orders-db.error" description="post.orders-db.error">
        <mock:throw-an exception-ref="#[new Exception('DB Exception')]" whenCalling=".*:.*" doc:name="throw.db.exception">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['InsertOrder']"/>
            </mock:with-attributes>
        </mock:throw-an>
        <mock:when messageProcessor=".*:.*" doc:name="mock.ws.call">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Create fulfillment order']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:exam=&quot;http://example.mule.mulesoft.com/&quot;&gt;    &lt;soapenv:Body&gt;       &lt;exam:OrderResponse&gt;          &lt;ID&gt;PO-123&lt;/ID&gt;       &lt;/exam:OrderResponse&gt;    &lt;/soapenv:Body&gt; &lt;/soapenv:Envelope&gt;']"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="mock.cloudhub">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Cloudhub Alert: Scatter Gather Issue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#['ok']"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy Scatter Gather Cloudhub">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Cloudhub Alert: Scatter Gather Issue']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals expectedValue="java.lang.Exception: DB Exception" actualValue="#[payload.getCauseException().toString()]" doc:name="Verify Exeption Message" message="Wrong Exception Message"/>
            </mock:assertions-before-call>
        </mock:spy>
        
        <munit:set payload="{&quot;first_name&quot;: &quot;Solution&quot;, &quot;last_name&quot;: &quot;Architect&quot;, &quot;email&quot;: &quot;solution.architect@mule.si.com&quot;,&quot;country&quot;: &quot;US&quot;,&quot;products&quot;: [{&quot;name&quot;: &quot;Squishy Mule&quot;,&quot;quantity&quot;: 10}]}" doc:name="Set Message"/>
        <flow-ref name="post:/orders:application/json:api-config" doc:name="Flow-ref to post:/orders:application/json:api-config"/>
        
    </munit:test>
    
</mule>
